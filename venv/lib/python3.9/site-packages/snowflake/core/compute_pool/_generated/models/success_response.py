# coding: utf-8
"""
    Snowflake Compute Pools API

    The Snowflake Compute Pools API is a REST API that you can use to access, update, and perform common actions on Compute Pool resources.  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: support@snowflake.com
    Generated by: https://openapi-generator.tech

    Do not edit this file manually.
"""

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from typing import Union

from pydantic import BaseModel, ConfigDict, StrictStr

from typing import Any, ClassVar, Dict, List, Optional


class SuccessResponse(BaseModel):

    status: Optional[StrictStr] = None

    __properties = ["status"]

    class Config:
        populate_by_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SuccessResponse:
        """Create an instance of SuccessResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = dict(
            self._iter(to_dict=True,
                       by_alias=True,
                       exclude={},
                       exclude_none=True))

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SuccessResponse:
        """Create an instance of SuccessResponse from a dict"""

        if obj is None:
            return None

        if type(obj) is not dict:
            return SuccessResponse.parse_obj(obj)

        _obj = SuccessResponse.parse_obj({
            "status": obj.get("status"),
        })

        return _obj


from typing import Optional, List, Dict


class SuccessResponseModel():

    def __init__(
        self,  # optional properties
        status: Optional[str] = None,
    ):

        self.status = status

    __properties = ["status"]

    def _to_model(self):
        return SuccessResponse(status=self.status, )

    @classmethod
    def _from_model(cls, model) -> SuccessResponseModel:
        return SuccessResponseModel(status=model.status, )

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        return self._to_model().to_dict()

    @classmethod
    def from_dict(cls, obj: dict) -> SuccessResponseModel:
        """Create an instance of SuccessResponse from a dict"""
        return cls._from_model(SuccessResponse.from_dict(obj))


SuccessResponse._model_class = SuccessResponseModel
