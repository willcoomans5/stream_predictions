# coding: utf-8
"""
    Snowflake Stage API

    The Snowflake Stage API is a REST API that you can use to access, update, and perform certain actions on stage resources in a Snowflake database.  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: support@snowflake.com
    Generated by: https://openapi-generator.tech

    Do not edit this file manually.
"""

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from typing import Union

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr

from typing import Any, ClassVar, Dict, List, Optional


class FileTransferMaterial(BaseModel):

    presigned_url: Optional[StrictStr] = None

    query_stage_master_key: Optional[StrictStr] = None

    query_id: Optional[StrictStr] = None

    smk_id: Optional[StrictInt] = None

    __properties = [
        "presigned_url", "query_stage_master_key", "query_id", "smk_id"
    ]

    class Config:
        populate_by_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> FileTransferMaterial:
        """Create an instance of FileTransferMaterial from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = dict(
            self._iter(to_dict=True,
                       by_alias=True,
                       exclude={},
                       exclude_none=True))

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> FileTransferMaterial:
        """Create an instance of FileTransferMaterial from a dict"""

        if obj is None:
            return None

        if type(obj) is not dict:
            return FileTransferMaterial.parse_obj(obj)

        _obj = FileTransferMaterial.parse_obj({
            "presigned_url":
            obj.get("presigned_url"),
            "query_stage_master_key":
            obj.get("query_stage_master_key"),
            "query_id":
            obj.get("query_id"),
            "smk_id":
            obj.get("smk_id"),
        })

        return _obj


from typing import Optional, List, Dict


class FileTransferMaterialModel():

    def __init__(
        self,  # optional properties
        presigned_url: Optional[str] = None,
        query_stage_master_key: Optional[str] = None,
        query_id: Optional[str] = None,
        smk_id: Optional[int] = None,
    ):

        self.presigned_url = presigned_url
        self.query_stage_master_key = query_stage_master_key
        self.query_id = query_id
        self.smk_id = smk_id

    __properties = [
        "presigned_url", "query_stage_master_key", "query_id", "smk_id"
    ]

    def _to_model(self):
        return FileTransferMaterial(
            presigned_url=self.presigned_url,
            query_stage_master_key=self.query_stage_master_key,
            query_id=self.query_id,
            smk_id=self.smk_id,
        )

    @classmethod
    def _from_model(cls, model) -> FileTransferMaterialModel:
        return FileTransferMaterialModel(
            presigned_url=model.presigned_url,
            query_stage_master_key=model.query_stage_master_key,
            query_id=model.query_id,
            smk_id=model.smk_id,
        )

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        return self._to_model().to_dict()

    @classmethod
    def from_dict(cls, obj: dict) -> FileTransferMaterialModel:
        """Create an instance of FileTransferMaterial from a dict"""
        return cls._from_model(FileTransferMaterial.from_dict(obj))


FileTransferMaterial._model_class = FileTransferMaterialModel
