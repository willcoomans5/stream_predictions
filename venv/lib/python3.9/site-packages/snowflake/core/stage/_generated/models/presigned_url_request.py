# coding: utf-8
"""
    Snowflake Stage API

    The Snowflake Stage API is a REST API that you can use to access, update, and perform certain actions on stage resources in a Snowflake database.  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: support@snowflake.com
    Generated by: https://openapi-generator.tech

    Do not edit this file manually.
"""

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from typing import Union

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr, field_validator

from typing import Any, ClassVar, Dict, List, Optional


class PresignedUrlRequest(BaseModel):

    mode: Optional[StrictStr] = 'download'

    expiration_time: Optional[StrictInt] = None

    __properties = ["mode", "expiration_time"]

    @field_validator('mode')
    def mode_validate_enum(cls, v):

        if v is None:
            return v
        if v not in ('upload', 'download'):
            raise ValueError("must validate the enum values ()")
        return v

    class Config:
        populate_by_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PresignedUrlRequest:
        """Create an instance of PresignedUrlRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = dict(
            self._iter(to_dict=True,
                       by_alias=True,
                       exclude={},
                       exclude_none=True))

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PresignedUrlRequest:
        """Create an instance of PresignedUrlRequest from a dict"""

        if obj is None:
            return None

        if type(obj) is not dict:
            return PresignedUrlRequest.parse_obj(obj)

        _obj = PresignedUrlRequest.parse_obj({
            "mode":
            obj.get("mode") if obj.get("mode") is not None else 'download',
            "expiration_time":
            obj.get("expiration_time"),
        })

        return _obj


from typing import Optional, List, Dict


class PresignedUrlRequestModel():

    def __init__(
        self,  # optional properties
        mode: Optional[str] = 'download',
        expiration_time: Optional[int] = None,
    ):

        self.mode = mode
        self.expiration_time = expiration_time

    __properties = ["mode", "expiration_time"]

    def _to_model(self):
        return PresignedUrlRequest(
            mode=self.mode,
            expiration_time=self.expiration_time,
        )

    @classmethod
    def _from_model(cls, model) -> PresignedUrlRequestModel:
        return PresignedUrlRequestModel(
            mode=model.mode,
            expiration_time=model.expiration_time,
        )

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        return self._to_model().to_dict()

    @classmethod
    def from_dict(cls, obj: dict) -> PresignedUrlRequestModel:
        """Create an instance of PresignedUrlRequest from a dict"""
        return cls._from_model(PresignedUrlRequest.from_dict(obj))


PresignedUrlRequest._model_class = PresignedUrlRequestModel
