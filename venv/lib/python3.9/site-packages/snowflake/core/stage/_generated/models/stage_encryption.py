# coding: utf-8
"""
    Snowflake Stage API

    The Snowflake Stage API is a REST API that you can use to access, update, and perform certain actions on stage resources in a Snowflake database.  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: support@snowflake.com
    Generated by: https://openapi-generator.tech

    Do not edit this file manually.
"""

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from typing import Union

from pydantic import BaseModel, ConfigDict, StrictStr, field_validator

from typing import Any, ClassVar, Dict, List, Optional


class StageEncryption(BaseModel):

    type: Optional[StrictStr] = None

    master_key: Optional[StrictStr] = None

    kms_key_id: Optional[StrictStr] = None

    __properties = ["type", "master_key", "kms_key_id"]

    @field_validator('type')
    def type_validate_enum(cls, v):

        if v is None:
            return v
        if v not in ('SNOWFLAKE_FULL', 'SNOWFLAKE_SSE', 'AWS_CSE',
                     'AWS_SSE_S3', 'AWS_SSE_KMS', 'GCS_SSE_KMS', 'AZURE_CSE',
                     'NONE'):
            raise ValueError("must validate the enum values ()")
        return v

    class Config:
        populate_by_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> StageEncryption:
        """Create an instance of StageEncryption from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = dict(
            self._iter(to_dict=True,
                       by_alias=True,
                       exclude={},
                       exclude_none=True))

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> StageEncryption:
        """Create an instance of StageEncryption from a dict"""

        if obj is None:
            return None

        if type(obj) is not dict:
            return StageEncryption.parse_obj(obj)

        _obj = StageEncryption.parse_obj({
            "type": obj.get("type"),
            "master_key": obj.get("master_key"),
            "kms_key_id": obj.get("kms_key_id"),
        })

        return _obj


from typing import Optional, List, Dict


class StageEncryptionModel():

    def __init__(
        self,  # optional properties
        type: Optional[str] = None,
        master_key: Optional[str] = None,
        kms_key_id: Optional[str] = None,
    ):

        self.type = type
        self.master_key = master_key
        self.kms_key_id = kms_key_id

    __properties = ["type", "master_key", "kms_key_id"]

    def _to_model(self):
        return StageEncryption(
            type=self.type,
            master_key=self.master_key,
            kms_key_id=self.kms_key_id,
        )

    @classmethod
    def _from_model(cls, model) -> StageEncryptionModel:
        return StageEncryptionModel(
            type=model.type,
            master_key=model.master_key,
            kms_key_id=model.kms_key_id,
        )

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        return self._to_model().to_dict()

    @classmethod
    def from_dict(cls, obj: dict) -> StageEncryptionModel:
        """Create an instance of StageEncryption from a dict"""
        return cls._from_model(StageEncryption.from_dict(obj))


StageEncryption._model_class = StageEncryptionModel
