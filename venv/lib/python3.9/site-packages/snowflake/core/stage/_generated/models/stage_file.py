# coding: utf-8
"""
    Snowflake Stage API

    The Snowflake Stage API is a REST API that you can use to access, update, and perform certain actions on stage resources in a Snowflake database.  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: support@snowflake.com
    Generated by: https://openapi-generator.tech

    Do not edit this file manually.
"""

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from typing import Union

from pydantic import BaseModel, ConfigDict, StrictStr

from typing import Any, ClassVar, Dict, List, Optional


class StageFile(BaseModel):

    name: Optional[StrictStr] = None

    size: Optional[StrictStr] = None

    md5: Optional[StrictStr] = None

    last_modified: Optional[StrictStr] = None

    __properties = ["name", "size", "md5", "last_modified"]

    class Config:
        populate_by_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> StageFile:
        """Create an instance of StageFile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = dict(
            self._iter(to_dict=True,
                       by_alias=True,
                       exclude={
                           "size",
                           "md5",
                           "last_modified",
                       },
                       exclude_none=True))

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> StageFile:
        """Create an instance of StageFile from a dict"""

        if obj is None:
            return None

        if type(obj) is not dict:
            return StageFile.parse_obj(obj)

        _obj = StageFile.parse_obj({
            "name": obj.get("name"),
            "size": obj.get("size"),
            "md5": obj.get("md5"),
            "last_modified": obj.get("last_modified"),
        })

        return _obj


from typing import Optional, List, Dict


class StageFileModel():

    def __init__(
        self,  # optional properties
        name: Optional[str] = None,
        size: Optional[str] = None,
        md5: Optional[str] = None,
        last_modified: Optional[str] = None,
    ):

        self.name = name
        self.size = size
        self.md5 = md5
        self.last_modified = last_modified

    __properties = ["name", "size", "md5", "last_modified"]

    def _to_model(self):
        return StageFile(
            name=self.name,
            size=self.size,
            md5=self.md5,
            last_modified=self.last_modified,
        )

    @classmethod
    def _from_model(cls, model) -> StageFileModel:
        return StageFileModel(
            name=model.name,
            size=model.size,
            md5=model.md5,
            last_modified=model.last_modified,
        )

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        return self._to_model().to_dict()

    @classmethod
    def from_dict(cls, obj: dict) -> StageFileModel:
        """Create an instance of StageFile from a dict"""
        return cls._from_model(StageFile.from_dict(obj))


StageFile._model_class = StageFileModel
