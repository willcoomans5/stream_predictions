# coding: utf-8
"""
    Snowflake Dynamic Table API

    The Snowflake Dynamic Table API is a REST API that you can use to access, update, and perform certain actions on Dynamic Tables resource in a Snowflake database.  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: support@snowflake.com
    Generated by: https://openapi-generator.tech

    Do not edit this file manually.
"""

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from typing import Union

from pydantic import BaseModel, ConfigDict, StrictStr

from typing import Any, ClassVar, Dict, List, Optional


class DynamicTableColumn(BaseModel):

    name: StrictStr

    datatype: Optional[StrictStr] = None

    comment: Optional[StrictStr] = None

    __properties = ["name", "datatype", "comment"]

    class Config:
        populate_by_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DynamicTableColumn:
        """Create an instance of DynamicTableColumn from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = dict(
            self._iter(to_dict=True,
                       by_alias=True,
                       exclude={},
                       exclude_none=True))

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DynamicTableColumn:
        """Create an instance of DynamicTableColumn from a dict"""

        if obj is None:
            return None

        if type(obj) is not dict:
            return DynamicTableColumn.parse_obj(obj)

        _obj = DynamicTableColumn.parse_obj({
            "name": obj.get("name"),
            "datatype": obj.get("datatype"),
            "comment": obj.get("comment"),
        })

        return _obj


from typing import Optional, List, Dict


class DynamicTableColumnModel():

    def __init__(
        self,
        name: str,
        # optional properties
        datatype: Optional[str] = None,
        comment: Optional[str] = None,
    ):

        self.name = name
        self.datatype = datatype
        self.comment = comment

    __properties = ["name", "datatype", "comment"]

    def _to_model(self):
        return DynamicTableColumn(
            name=self.name,
            datatype=self.datatype,
            comment=self.comment,
        )

    @classmethod
    def _from_model(cls, model) -> DynamicTableColumnModel:
        return DynamicTableColumnModel(
            name=model.name,
            datatype=model.datatype,
            comment=model.comment,
        )

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        return self._to_model().to_dict()

    @classmethod
    def from_dict(cls, obj: dict) -> DynamicTableColumnModel:
        """Create an instance of DynamicTableColumn from a dict"""
        return cls._from_model(DynamicTableColumn.from_dict(obj))


DynamicTableColumn._model_class = DynamicTableColumnModel
