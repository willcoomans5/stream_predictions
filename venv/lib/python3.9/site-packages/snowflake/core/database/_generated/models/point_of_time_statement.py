# coding: utf-8
"""
    Snowflake Database API

    The Snowflake Database API is a REST API that you can use to access, update, and perform certain actions on Database resource in Snowflake.  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: support@snowflake.com
    Generated by: https://openapi-generator.tech

    Do not edit this file manually.
"""

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from typing import Union

from snowflake.core.database._generated.models.point_of_time import PointOfTime

from pydantic import ConfigDict, StrictStr

from typing import Any, ClassVar, Dict, List, Optional


class PointOfTimeStatement(PointOfTime):

    statement: Optional[StrictStr] = None

    __properties = ["point_of_time_type", "reference"]

    class Config:
        populate_by_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PointOfTimeStatement:
        """Create an instance of PointOfTimeStatement from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = dict(
            self._iter(to_dict=True,
                       by_alias=True,
                       exclude={},
                       exclude_none=True))

        _dict[
            'point_of_time_type'] = PointOfTime.get_child_model_discriminator_value(
                'PointOfTimeStatement')

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PointOfTimeStatement:
        """Create an instance of PointOfTimeStatement from a dict"""

        if obj is None:
            return None

        if type(obj) is not dict:
            return PointOfTimeStatement.parse_obj(obj)

        _obj = PointOfTimeStatement.parse_obj({
            "reference":
            obj.get("reference"),
            "statement":
            obj.get("statement"),
        })

        return _obj


from typing import Optional, List, Dict

from snowflake.core.database._generated.models.point_of_time import PointOfTime


class PointOfTimeStatementModel(PointOfTime):

    def __init__(
        self,  # optional properties
        reference: Optional[str] = None,
        statement: Optional[str] = None,
    ):
        super().__init__(reference=reference, )
        self.statement = statement

    __properties = ["point_of_time_type", "reference"]

    def _to_model(self):
        return PointOfTimeStatement(
            reference=self.reference,
            statement=self.statement,
        )

    @classmethod
    def _from_model(cls, model) -> PointOfTimeStatementModel:
        return PointOfTimeStatementModel(
            reference=model.reference,
            statement=model.statement,
        )

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        return self._to_model().to_dict()

    @classmethod
    def from_dict(cls, obj: dict) -> PointOfTimeStatementModel:
        """Create an instance of PointOfTimeStatement from a dict"""
        return cls._from_model(PointOfTimeStatement.from_dict(obj))


PointOfTimeStatement._model_class = PointOfTimeStatementModel
