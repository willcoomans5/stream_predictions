# coding: utf-8
"""
    Snowflake Services API

    The Snowflake Services API is a REST API that you can use to access, update, and perform certain actions on Services resource in a Snowflake database.  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: support@snowflake.com
    Generated by: https://openapi-generator.tech

    Do not edit this file manually.
"""

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from typing import Union

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr

from typing import Any, ClassVar, Dict, List, Optional


class ServiceEndpoint(BaseModel):

    name: Optional[StrictStr] = None

    port: Optional[StrictInt] = None

    protocol: Optional[StrictStr] = None

    is_public: Optional[StrictBool] = None

    ingress_url: Optional[StrictStr] = None

    __properties = ["name", "port", "protocol", "is_public", "ingress_url"]

    class Config:
        populate_by_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ServiceEndpoint:
        """Create an instance of ServiceEndpoint from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = dict(
            self._iter(to_dict=True,
                       by_alias=True,
                       exclude={},
                       exclude_none=True))

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ServiceEndpoint:
        """Create an instance of ServiceEndpoint from a dict"""

        if obj is None:
            return None

        if type(obj) is not dict:
            return ServiceEndpoint.parse_obj(obj)

        _obj = ServiceEndpoint.parse_obj({
            "name": obj.get("name"),
            "port": obj.get("port"),
            "protocol": obj.get("protocol"),
            "is_public": obj.get("is_public"),
            "ingress_url": obj.get("ingress_url"),
        })

        return _obj


from typing import Optional, List, Dict


class ServiceEndpointModel():

    def __init__(
        self,  # optional properties
        name: Optional[str] = None,
        port: Optional[int] = None,
        protocol: Optional[str] = None,
        is_public: Optional[bool] = None,
        ingress_url: Optional[str] = None,
    ):

        self.name = name
        self.port = port
        self.protocol = protocol
        self.is_public = is_public
        self.ingress_url = ingress_url

    __properties = ["name", "port", "protocol", "is_public", "ingress_url"]

    def _to_model(self):
        return ServiceEndpoint(
            name=self.name,
            port=self.port,
            protocol=self.protocol,
            is_public=self.is_public,
            ingress_url=self.ingress_url,
        )

    @classmethod
    def _from_model(cls, model) -> ServiceEndpointModel:
        return ServiceEndpointModel(
            name=model.name,
            port=model.port,
            protocol=model.protocol,
            is_public=model.is_public,
            ingress_url=model.ingress_url,
        )

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        return self._to_model().to_dict()

    @classmethod
    def from_dict(cls, obj: dict) -> ServiceEndpointModel:
        """Create an instance of ServiceEndpoint from a dict"""
        return cls._from_model(ServiceEndpoint.from_dict(obj))


ServiceEndpoint._model_class = ServiceEndpointModel
