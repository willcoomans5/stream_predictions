# coding: utf-8
"""
    Snowflake Session API

    The Snowflake Session API is a REST API that you can use to query your current session properties.  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: support@snowflake.com
    Generated by: https://openapi-generator.tech

    Do not edit this file manually.
"""

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from typing import Union

from pydantic import BaseModel, ConfigDict, StrictStr

from typing import Any, ClassVar, Dict, List, Optional


class CurrentSecondaryRoles(BaseModel):

    roles: Optional[StrictStr] = None

    value: Optional[StrictStr] = None

    __properties = ["roles", "value"]

    class Config:
        populate_by_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CurrentSecondaryRoles:
        """Create an instance of CurrentSecondaryRoles from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = dict(
            self._iter(to_dict=True,
                       by_alias=True,
                       exclude={},
                       exclude_none=True))

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CurrentSecondaryRoles:
        """Create an instance of CurrentSecondaryRoles from a dict"""

        if obj is None:
            return None

        if type(obj) is not dict:
            return CurrentSecondaryRoles.parse_obj(obj)

        _obj = CurrentSecondaryRoles.parse_obj({
            "roles": obj.get("roles"),
            "value": obj.get("value"),
        })

        return _obj


from typing import Optional, List, Dict


class CurrentSecondaryRolesModel():

    def __init__(
        self,  # optional properties
        roles: Optional[str] = None,
        value: Optional[str] = None,
    ):

        self.roles = roles
        self.value = value

    __properties = ["roles", "value"]

    def _to_model(self):
        return CurrentSecondaryRoles(
            roles=self.roles,
            value=self.value,
        )

    @classmethod
    def _from_model(cls, model) -> CurrentSecondaryRolesModel:
        return CurrentSecondaryRolesModel(
            roles=model.roles,
            value=model.value,
        )

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        return self._to_model().to_dict()

    @classmethod
    def from_dict(cls, obj: dict) -> CurrentSecondaryRolesModel:
        """Create an instance of CurrentSecondaryRoles from a dict"""
        return cls._from_model(CurrentSecondaryRoles.from_dict(obj))


CurrentSecondaryRoles._model_class = CurrentSecondaryRolesModel
