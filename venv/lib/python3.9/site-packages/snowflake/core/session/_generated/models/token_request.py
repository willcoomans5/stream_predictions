# coding: utf-8
"""
    Snowflake Session API

    The Snowflake Session API is a REST API that you can use to manage Snowflake sessions and session tokens.  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: support@snowflake.com
    Generated by: https://openapi-generator.tech
"""

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from typing import Optional
from typing import Union
from snowflake.core.session._generated.pydantic_compatibility import BaseModel, Field, StrictStr


class TokenRequest(BaseModel):
    session_token: Optional[StrictStr] = Field(None, alias="sessionToken")
    __properties = ["sessionToken"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TokenRequest:
        """Create an instance of TokenRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TokenRequest:
        """Create an instance of TokenRequest from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return TokenRequest.parse_obj(obj)

        _obj = TokenRequest.parse_obj({
            "session_token": obj.get("sessionToken"),
        })
        return _obj


from typing import Optional, List, Dict


class TokenRequestModel():

    def __init__(
        self,
        # optional properties
        session_token: Optional[str] = None,
    ):
        self.session_token = session_token

    __properties = ["sessionToken"]

    def _to_model(self):
        return TokenRequest(session_token=self.session_token, )

    @classmethod
    def _from_model(cls, model) -> TokenRequestModel:
        return TokenRequestModel(session_token=model.session_token, )

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        return self._to_model().to_dict()

    @classmethod
    def from_dict(cls, obj: dict) -> TokenRequestModel:
        """Create an instance of TokenRequest from a dict"""
        return cls._from_model(TokenRequest.from_dict(obj))


TokenRequest._model_class = TokenRequestModel
