# coding: utf-8
"""
    Snowflake Table API

    The Snowflake Table API is a REST API that you can use to access, update, and perform certain actions on Tables resource in a Snowflake database.  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: support@snowflake.com
    Generated by: https://openapi-generator.tech

    Do not edit this file manually.
"""

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

import snowflake.core.table._generated.models
from snowflake.core.table._generated.models import *

from typing import Union

from importlib import import_module

from pydantic import BaseModel, ConfigDict, StrictStr

from typing import Any, ClassVar, Dict, List, Optional, Union


class Constraint(BaseModel):

    name: Optional[StrictStr] = None

    column_names: Optional[List[StrictStr]] = None

    __properties = ["name", "column_names", "constraint_type"]

    class Config:
        populate_by_name = True
        validate_assignment = True

    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = 'constraint_type'

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        'FOREIGN KEY': 'ForeignKey',
        'PRIMARY KEY': 'PrimaryKey',
        'UNIQUE': 'UniqueKey'
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    __discriminator_value_to_type: ClassVar[Dict[str, str]] = {
        'ForeignKey': 'FOREIGN KEY',
        'PrimaryKey': 'PRIMARY KEY',
        'UniqueKey': 'UNIQUE',
    }

    @classmethod
    def get_child_model_discriminator_value(cls, child_model: str) -> str:
        return cls.__discriminator_value_to_type[child_model]

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls,
                  json_str: str) -> Union[ForeignKey, PrimaryKey, UniqueKey]:
        """Create an instance of Constraint from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = dict(
            self._iter(to_dict=True,
                       by_alias=True,
                       exclude={},
                       exclude_none=True))

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Union[ForeignKey, PrimaryKey, UniqueKey]:
        """Create an instance of Constraint from a dict"""

        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type:
            klass = getattr(snowflake.core.table._generated.models,
                            object_type)
            return klass.from_dict(obj)
        else:
            raise ValueError(
                "Constraint failed to lookup discriminator value from " +
                json.dumps(obj) + ". Discriminator property name: " +
                cls.__discriminator_property_name + ", mapping: " +
                json.dumps(cls.__discriminator_value_class_map))


from typing import Optional, List, Dict


class ConstraintModel():

    def __init__(
        self,  # optional properties
        name: Optional[str] = None,
        column_names: Optional[List[str]] = None,
    ):

        self.name = name
        self.column_names = column_names

    __properties = ["name", "column_names", "constraint_type"]

    def _to_model(self):
        return Constraint(
            name=self.name,
            column_names=self.column_names,
        )

    @classmethod
    def _from_model(cls, model) -> ConstraintModel:
        return model.__class__._model_class._from_model(model)

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        return self._to_model().to_dict()

    @classmethod
    def from_dict(
            cls, obj: dict
    ) -> Union[ForeignKeyModel, PrimaryKeyModel, UniqueKeyModel]:
        """Create an instance of Constraint from a dict"""
        return cls._from_model(Constraint.from_dict(obj))


Constraint._model_class = ConstraintModel
